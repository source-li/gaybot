# -*- coding: utf-8 -*-
import config
import database

import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton


bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())



@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        text = f"""<b>üôá‚Äç‚ôÇÔ∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:
/{config.RASSILKA_COMMAND} ‚ûô —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/{config.SKOLKO_USEROV} ‚ûô —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ</b>"""
        await message.reply(text, parse_mode='html')
    registered = database.add_user_from_database(message.from_user.id, True)
    if registered:
        users_len = len(database.get_all_user_from_database())
        user_name = message.from_user.username
        user_first_name = message.from_user.first_name
        await bot.send_message(config.ADMIN_ID,
            f'<b>üôá‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="t.me/{user_name}">{user_first_name}</a> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!</b>\nüë• –¢–µ–ø–µ—Ä—å –≤ –±–æ—Ç–µ <u>{users_len}</u> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
            parse_mode='html', disable_web_page_preview=True)

    gif_path = "data/IMG_1314.gif"
    welcome_text = f"<b>üëã–ü—Ä–∏–≤–µ—Ç!\nü§ñ–Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –≥–µ–π.\nüí≠ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª—é–±–æ–π —á–∞—Ç, –≤–≤–µ–¥–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ <code>@{config.BOT_URL[13:]}</code> \n\n‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /set –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/set 100</code></b>"
    try:
        with open(gif_path, 'rb') as gif:
            await bot.send_animation(chat_id=message.chat.id, animation=gif, caption=welcome_text, parse_mode='html')
    except Exception:
        await message.reply(welcome_text, parse_mode='html')
        

    


@dp.message_handler(commands=[config.SKOLKO_USEROV])
async def send_message(message: types.Message):
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        users = database.get_all_user_from_database()
        await message.reply(f"<b>üë• –í –±–æ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ‚áí {len(users)} ‚áê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>", parse_mode='html')


@dp.message_handler(commands=['set'])
async def send_message(message: types.Message):
    user_id = message.from_user.id
    try:
        percent = int(message.text.split(" ")[1])
        if percent >= 0 and percent <= 100:
            database.set_user_last_percent(user_id, percent)
            database.set_user_saved_time(user_id)
            await message.reply(f"<b>üè≥Ô∏è‚Äçüåà –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–≤–æ–µ–≥–æ –≥–µ–π—Å—Ç–≤–∞ —Ç–µ–ø–µ—Ä—å {percent}%</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è {config.SAVED_HOURS} —á–∞—Å.", parse_mode='html')
        else:
            await message.reply(f"<b>‚ùå –ù–µ –≤–µ—Ä–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞!</b>\nüè≥Ô∏è‚Äçüåà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100!", parse_mode='html')
    except Exception as e:
        await message.reply(f"<b>‚ùå –ù–µ –≤–µ—Ä–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞!</b>\nüí≠ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /set –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/set 100</code>", parse_mode='html')


@dp.inline_handler()
async def inline_query(query: types.InlineQuery):
    user_id = query.from_user.id
    user_name = query.from_user.username
    user_first_name = query.from_user.first_name
    current_time = datetime.now()
    registered = database.add_user_from_database(user_id, False)
    if registered:
        users_len = len(database.get_all_user_from_database())
        await bot.send_message(config.ADMIN_ID,
            f'<b>üôá‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="t.me/{user_name}">{user_first_name}</a> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!</b>\nüë• –¢–µ–ø–µ—Ä—å –≤ –±–æ—Ç–µ <u>{users_len}</u> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
            parse_mode='html', disable_web_page_preview=True)

    saved_time = database.get_user_saved_time(user_id)
    saved_percent = database.get_user_last_percent(user_id)

    if (current_time - saved_time) < config.RESULT_LIFETIME:
        random_percent = saved_percent
    else:
        random_percent = random.randint(0, 100)
        database.set_user_last_percent(user_id, random_percent)
        database.set_user_saved_time(user_id)

    inline_kb = InlineKeyboardMarkup()
    to_bot = InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", url=config.BOT_URL)
    share = InlineKeyboardButton("üí≠ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query="")
    inline_kb.add(to_bot)
    inline_kb.add(share)

    message_content = InputTextMessageContent(message_text=f'<b><a href="t.me/{user_name}">{user_first_name}</a> –≥–µ–π –Ω–∞ {random_percent}%</b>', parse_mode='html', disable_web_page_preview=True)

    result = types.InlineQueryResultArticle( id='1', title=f"üè≥Ô∏è‚Äçüåà –ù–∞—Å–∫–æ–ª—å–∫–æ —è –≥–µ–π?",
        description="üëáüèª –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", thumb_url=config.GAY_IMAGE_URL,
        input_message_content=message_content, reply_markup=inline_kb
    )
    
    await query.answer([result], cache_time=1) 



@dp.message_handler(commands=[config.RASSILKA_COMMAND])
async def send_message(message: types.Message):
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        database.set_user_menu(user_id, "–†–ê–°–°–´–õ–ö–ê")
        await message.answer(f"<b>‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!</b>", parse_mode="html")


@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO, types.ContentType.VIDEO])
async def without_puree(message: types.Message):
    user_id = message.from_user.id
    if database.get_user_menu(user_id) == "–†–ê–°–°–´–õ–ö–ê":
        mailing = 0
        try:
            users = database.get_all_user_from_database()
            for user in users:
                await message.copy_to(user[0])
                mailing += 1
        except Exception as ex:
            pass

        database.set_user_menu(user_id, "main_menu")
        await message.answer(f"<b>üì© –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {mailing} –∏–∑ {len(users)} —Å–æ–æ–±—â–µ–Ω–∏–π!</b>", parse_mode="html")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)